# Networking
This page provides an introduction to the common networking configurations used by libvirt based applications. This information applies to all hypervisors, whether Xen, KVM or another.

## NAT forwarding
### Forwarding Incoming Connections

By default, guests that are connected via a virtual network with NAT forwarding can make any outgoing network connection they like. Incoming connections are allowed from the host, and from other guests connected to the same libvirt network, but all other incoming connections are blocked by iptables rules.

If you would like to make a service that is on a guest behind a NATed virtual network publicly available, you can install the necessary iptables rules to forward incoming connections to the host on any given port HP to port GP on the guest GNAME:

1\) Determine a) the name of the guest "G", b) the IP address of the guest "I", c) the port on the guest that will receive the connections "GP", and d) the port on the host that will be forwarded to the guest "HP".

Use the basic script below (port mappings)
```
 #!/bin/bash

 # Update the following variables to fit your setup
 GUEST_IP=
 GUEST_PORT=
 HOST_PORT=

 iptables -I FORWARD -p tcp -d  $GUEST_IP -j ACCEPT
 iptables -t nat -I PREROUTING -p tcp --dport $HOST_PORT -j DNAT --to $GUEST_IP:$GUEST_PORT
```

## Bridged networking
### Host configuration

The NAT based connectivity is useful for quick & easy deployments, or on machines with dynamic/sporadic networking connectivity. More advanced users will want to use full bridging, where the guest is connected directly to the LAN.

#### Debian/Ubuntu Bridging
##### Altering the interface config
First take down the interface you wish to bridge
```
 ifdown eth0
```
Edit /etc/network/interfaces and find the config for the physical interface, which looks something like 
```
 allow-hotplug eth0
 iface eth0 inet static
        address 192.168.2.4
        netmask 255.255.255.0
        network 192.168.2.0
        broadcast 192.168.2.255
        gateway 192.168.2.2
```
Remove the 'allow-hotplug eth0' line, replacing it with 'auto br0', and change the next line with iface name to 'br0', so it now starts with 
```
 auto br0
 iface br0 inet static
```
And then define the interface as being a bridge and specify its ports 
```
       bridge_ports eth0
       bridge_stp on
       bridge_maxwait 0
       bridge_fd 0
```
The complete config should now look like 
```
 auto br0
 iface br0 inet static
         address 192.168.2.4
         netmask 255.255.255.0
         network 192.168.2.0
         broadcast 192.168.2.255
         gateway 192.168.2.2
         bridge_ports eth0
         bridge_stp on
         bridge_maxwait 0
```
The interface can now be started with 
```
 ifup br0
```
